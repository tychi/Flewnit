//Tesselation evaluation shader template

{% include  "00_Generic_Common_VersionTag.glsl" %}
{% include  "01_Generic_Common_precisionTag.glsl" %}

layout(triangles, fractional_even_spacing, ccw) in;
//layout(triangles, fractional_odd_spacing, ccw) in;
//layout(triangles, equal_spacing, ccw) in;



//---- shader interface ----------------------
//input from vertex/tessEval shader
in InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
  
  float distanceDependentDisplacementFactor;
  
} input[];

//output to fragment shader
out InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
} output;

//patch in float distanceDependentDisplacementFactor;

//--------------------------------------------


uniform sampler2D displacementMap;
//uniform sampler2D normalMap;

uniform float displacementIntensity = 1.0f;


{% if not layeredRendering %}
    //we have to calculate final gl_Position value in this stage as there is no geometry shader to do it^^
    uniform mat4 viewMatrix;
    uniform mat4 projectionMatrix;
    uniform mat4 viewProjectionMatrix;
{% endif %}
{% if SHADOW_FEATURE_EXPERIMENTAL_SHADOWCOORD_CALC_IN_FRAGMENT_SHADER and LIGHT_SOURCES_SHADOW_FEATURE_ONE_SPOT_LIGHT %}
          uniform mat4 shadowMapLookupMatrix;  //bias*perspLight*viewLight * (camView)‚Åª1  for light calcs in view space
{% endif %}


/*
int edgeIndexIfVertexOnEdge()
{
  if(gl_TessCoord.x <= 0.01) return 0;
  if(gl_TessCoord.y <= 0.01) return 1;
  if(gl_TessCoord.z <= 0.01) return 2;
  
  return -1;
}
*/

void main()
{    
  //------------ following barycentric weighted output of vertex shader-computed variables ---------
  
  #define BARYCENTRIC_WEIGHTED(var) ( gl_TessCoord.x * input[0].var + gl_TessCoord.y * input[1].var + gl_TessCoord.z * input[2].var )
  
  output.position =   BARYCENTRIC_WEIGHTED(position);
  output.normal   =   BARYCENTRIC_WEIGHTED(normal);
  {% if SHADING_FEATURE_NORMAL_MAPPING %}
    output.tangent =  BARYCENTRIC_WEIGHTED(tangent);
  {% endif %}
  output.texCoords =  BARYCENTRIC_WEIGHTED(texCoords);
  
  
  //-------------------------------------------------------------------
  //displacemant calcs:

/*  float displacementVal = texelFetch(
          normalMap, 
          ivec2(
            output.texCoords.x * textureSize(normalMap,0).x,  
            output.texCoords.y * textureSize(normalMap,0).y
          )/1 ,
          0  
        ).w 
        - 0.5;
*/

  ivec2 texelPos = ivec2(
            output.texCoords.x * (textureSize(displacementMap,0).x ),  
            output.texCoords.y * (textureSize(displacementMap,0).y )
          ) % textureSize(displacementMap,0)  ;
          

  float displacementVal = 
        (
          texelFetch(
            displacementMap, 
            texelPos,
            0  //mip map level 0; not thought about sophisticated mip map usage in this context yet
          ).x 
          //note: when applying shift,scale and type conversion from uint to int and setting the texture parameters accordingly,
          //we could omit the following two operations: TODO test it
          -0.5 //normalized values: shift from [0..1] to [-0.5 .. +0.5]
        )
        *2.0 //scale from [-0.5 .. +0.5] to [-1..+1]
        ;
        
  float weightedDistanceDependentDisplacementFactor = 
    BARYCENTRIC_WEIGHTED(distanceDependentDisplacementFactor);         

  output.position +=  
    normalize(output.normal) * 
    displacementVal *
    displacementIntensity * 
    weightedDistanceDependentDisplacementFactor
    ;


/*
  output.position +=  
    normalize(output.normal) * 
    displacementVal *
    displacementIntensity
    ;
*/


  //-------------------------------------------------------------------
  //set non-directly interpolatable values and pass-through :

  {% if not layeredRendering %} 
    //if layered rendering, the world space position will be transformed in geometry shader;
    //if not, the viewspace position is transformed here:
    gl_Position = projectionMatrix * output.position;
    
   {% if SHADOW_FEATURE_EXPERIMENTAL_SHADOWCOORD_CALC_IN_FRAGMENT_SHADER and LIGHT_SOURCES_SHADOW_FEATURE_ONE_SPOT_LIGHT %}
      output.shadowCoord = shadowMapLookupMatrix * output.position;
    {% endif %}
  {% endif %}

  {% if RENDERING_TECHNIQUE_PRIMITIVE_ID_RASTERIZATION or instancedRendering %}
    output.genericIndices = input[0].genericIndices;
  {% endif %}
  
  //do NOT pass the depthImageOrPointLightSMGen-optimization variables as they are just redundancy on this stage where
  //the full 3D-pos vector has already been written to; (hard optimization is not the primary goal atm);   
    
}



{%comment%} following lagacy code

/*
//patch in int dispMapHigherResLod;
//patch in float lodLevelInterpolationFactor;
//patch in float originalTessLevelOuter[3];
*/

/*
    int edgeIndex = edgeIndexIfVertexOnEdge();
    float originalTessLevel =  min(min(originalTessLevelOuter[0],originalTessLevelOuter[1]),originalTessLevelOuter[2]);
    float pow2AlignedTessLevel = gl_TessLevelInner[0];
    //float extraDisp= 1.0;
    if(edgeIndex>=0)
    {
      //calc edge specific interpolation
      originalTessLevel = originalTessLevelOuter[edgeIndex];
      //grab not the minimum of all tesslavels (as caculated in tessCtrl and written to gl_TessLevelInner[0] )
      // but the actual "aligned" tesslevel of the edge the vertex lies on; 
      //(we know that it has the form (2^n)-1), hence the following strid calculation is correct
      pow2AlignedTessLevel = gl_TessLevelOuter[edgeIndex] + 1.0;
      
      //extraDisp= 10.0;
    }
    //we interpolate between power of twos: [2..4] or [4..8] etc.; hence the stride is not constant
    //a power-of two number halved, gives the power of two-stride to interpolate within
    float tesslevelStrideToInterpolate =  pow2AlignedTessLevel * 0.5;
   
    
    int texCoordScale  = 
      int
      ( 
        textureSize(normalMap,0).x / 
        clamp( int(pow2AlignedTessLevel*4), 1, textureSize(normalMap,0).x ) 
       )   ; 
    
    int mipMapLODFactor = int( max( log2(texCoordScale), 0 ) );

*/


/*
  //float log2TexSize =  log2( textureSize(normalMap,0).x );
  //float log2AlignedTessLevel = clamp( log2( originalTessLevel ),1.0,log2TexSize);
  //float LODfactor  =    (log2TexSize / log2AlignedTessLevel)  -1.0 ;
    
  float displacementValHighRes = texelFetch(
          normalMap, 
          ivec2(
            output.texCoords.x * textureSize(normalMap,0).x,  
            output.texCoords.y * textureSize(normalMap,0).y
          ) / (texCoordScale  ) ,
          mipMapLODFactor  
        ).w 
        - 0.5;

  float displacementValLowRes = texelFetch(
          normalMap, 
          ivec2(
            output.texCoords.x * textureSize(normalMap,0).x,  
            output.texCoords.y * textureSize(normalMap,0).y
          ) / (texCoordScale),
          mipMapLODFactor  
        ).w 
        - 0.5;
        
  float exactTesslevelOnStride =   originalTessLevel - tesslevelStrideToInterpolate;
  float lodLevelInterpolationFactor = exactTesslevelOnStride / tesslevelStrideToInterpolate;
 */

{%endcomment%}
