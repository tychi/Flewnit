//Tesselation control shader template

{% include  "00_Generic_Common_VersionTag.glsl" %}
{% include  "01_Generic_Common_precisionTag.glsl" %}

layout(vertices = 3) out;


//metro 2033 LOD criteria:
uniform float numScreenPixels = 640.0;
uniform float tessQualityFactor = 0.01;//0.007;// 0.004;//0.0025;//0.04;
uniform float distanceToBeginWithTesselation = 75.0;
uniform float distanceUntilFullSubdivision = 30.0;
uniform float minTessLevel = 1.0f;
uniform float maxTessLevel = 64.0;

//---- shader interface ----------------------
//input from vertex/tessEval shader
in InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
} input[];
//output to fragment shader
out InterfaceData
{
  {% include  "09_Generic_InterfaceData.glsl" %}
  
  float distanceDependentDisplacementFactor;
  
} output[];

//patch out float distanceDependentDisplacementFactor;

//--------------------------------------------



float calculateDistanceDependentDisplacementFactor( float distanceVS )
{
 float distFraction = 
    clamp(
      (distanceVS - distanceUntilFullSubdivision) / (distanceToBeginWithTesselation - distanceUntilFullSubdivision),
      0.0,
      1.0 
    );
  
 return 1.0- (sqrt(distFraction));
}



void main()
{
  //metro 2033 LOD criteria: TESS_FACT = LEN * NP * Q / DIST
  //modified in the way that distance contribution to tessfactor is in a limitied range
  
{%if RENDERING_TECHNIQUE_SHADOWMAP_GENERATION or worldSpaceTransform %}
  //every user varyings are either in world space (worldSpaceTransform)
  //or in the shadow cam view- or world space (SM generation, layered rendering or not);
  //but we need the VIEW space of the SPECTATOR cam for the Tessellation level calculations!
  //The vertex shader will have written view space SPECTATOR cam pos to 
  //gl_Position in this scenario  
  vec3 edgeStartVS = gl_in[ (gl_InvocationID + 1) % 3 ].gl_Position.xyz;
  vec3 edgeEndVS   = gl_in[ (gl_InvocationID + 2) % 3 ].gl_Position.xyz;
  vec3 ownVertVS   = gl_in[  gl_InvocationID          ].gl_Position.xyz;
{% else %}
  //no special case, we do just default rendering in spectator- view space; So grab this value:
  vec3 edgeStartVS = input[ (gl_InvocationID + 1) % 3 ].position.xyz;
  vec3 edgeEndVS   = input[ (gl_InvocationID + 2) % 3 ].position.xyz;
  vec3 ownVertVS   = input[  gl_InvocationID          ].position.xyz;  
{% endif %}   
  
  
  float edgeDistVS = length( 0.5 * ( edgeEndVS + edgeStartVS) );
  float distanceFactor = calculateDistanceDependentDisplacementFactor( edgeDistVS ) ;
  output[gl_InvocationID].distanceDependentDisplacementFactor = calculateDistanceDependentDisplacementFactor( length(ownVertVS) );

 float edgeLengthVS = length( edgeEndVS - edgeStartVS  );
   
  float originalTessLevel =  
        edgeLengthVS 
      *640 //* numScreenPixels 
      * tessQualityFactor 
      * distanceFactor ;
  //originalTessLevel -= 8.0; 
  //float originalTessLevel =  edgeLengthVS * numScreenPixels * tessQualityFactor * (1.0- (sqrt(sqrt(distFraction)))) ; 
  //originalTessLevel =  edgeLengthVS * numScreenPixels * tessQualityFactor / edgeDistVS ;
  originalTessLevel = clamp(originalTessLevel , minTessLevel, maxTessLevel);    
 
  gl_TessLevelOuter[gl_InvocationID] = originalTessLevel;
  barrier(); //------------------------------------------ 
  if (gl_InvocationID == 0) 
  {
    gl_TessLevelInner[0] = max(max(gl_TessLevelOuter[0],gl_TessLevelOuter[1]),gl_TessLevelOuter[2]) ;//+1.0;//+1.0;
    //distanceDependentDisplacementFactor = distanceFactor;
  }
  


  //------------ following only unmodified pass-through of vertex shader-computed variables ---------
  output[gl_InvocationID].position = input[gl_InvocationID].position; //pos will always be needed by tessEval
  output[gl_InvocationID].normal = input[gl_InvocationID].normal; //normal, too, for displacement
  {% if SHADING_FEATURE_NORMAL_MAPPING %}
      output[gl_InvocationID].tangent = input[gl_InvocationID].tangent;
  {% endif %}
  output[gl_InvocationID].texCoords = input[gl_InvocationID].texCoords; //also always needed for displ map lookup

  {% if RENDERING_TECHNIQUE_PRIMITIVE_ID_RASTERIZATION or instancedRendering %}
    output[gl_InvocationID].genericIndices = input[gl_InvocationID].genericIndices;
  {% endif %}
  //do NOT pass shadow coord, as projected stuff it must be newly calculated from displaced world/view space vertices
  //do NOT pass the depthImageOrPointLightSMGen-optimization variables as they are just redundancy on this stage where we need the full 3D-pos vector;       

}


{%comment%} following lagacy code
/*
//patch out int dispMapHigherResLod;
//patch out float lodLevelInterpolationFactor;
//patch out float originalTessLevelOuter[3];
*/

/*
//own flickering (i.e. BAD) LOD criteria:
uniform vec2 viewPortHalfExtends = vec2(320.0,240.0);
uniform float targetEdgeLenghtInPixels = 25.0;
*/

/*
  //own flickering LOD try:
  
  vec4 edgeStartHomog  = gl_in[ (gl_InvocationID + 1) % 3 ].gl_Position;
  vec4 edgeEndHomog    = gl_in[ (gl_InvocationID + 2) % 3 ].gl_Position;
  
  edgeStartHomog /= edgeStartHomog.w;
  edgeEndHomog /= edgeEndHomog.w;
  
  float edgeLenghtPixel =  length( (edgeEndHomog.xy - edgeStartHomog.xy) * viewPortHalfExtends.xy );
  
  gl_TessLevelOuter[gl_InvocationID] = edgeLenghtPixel / targetEdgeLenghtInPixels;

  barrier();
    
  if (gl_InvocationID == 0) 
  {
    //gl_TessLevelInner[0] = (gl_TessLevelOuter[0]+gl_TessLevelOuter[1]+gl_TessLevelOuter[2]) / 3.0;
    gl_TessLevelInner[0] = max(max(gl_TessLevelOuter[0],gl_TessLevelOuter[1]),gl_TessLevelOuter[2]);
  }
*/

//---------------------------------------------------------------------------------------


/*
float ceilToNextPowerOf2(float originalTessLevel)
{
  return exp2( ceil( log2(originalTessLevel)) ) ;//-1.0;
}

*/

/*
  if (gl_InvocationID == 0) 
  {
    //this way, the  gl_TessLevelInner[0] is at the same time eqal to the approximate power-of-two-number of vertices
    //generated for an  edge and hence an indicator at which mimpmap level we have to sample the displacement map;
    //each vertex shall obtain a filtered displacment value in order to omit undersampling artifacts;
    gl_TessLevelInner[0] = min(min(gl_TessLevelOuter[0],gl_TessLevelOuter[1]),gl_TessLevelOuter[2]);//+1.0;
    
    float log2TexSize =  log2( textureSize(normalMap,0).x );
    float log2AlignedTessLevel = clamp( log2( gl_TessLevelInner[0] ),1.0,log2TexSize);
    float LODfactor  =    (log2TexSize / log2AlignedTessLevel)  -1.0 ;
    dispMapHigherResLod =  int( floor( clamp( LODfactor, 0.0, log2TexSize-1.0 ) + 0.5 ) );
    
    //we interpolate between power of twos: [2..4] or [4..8] etc.; hence the stride is not constant
    //a power-of two number halved, gives the power of two-stride to interpolate within
    float tesslevelStrideToInterpolate =  gl_TessLevelInner[0] * 0.5 ; 
    float exactTesslevelOnStride =     minimalExcactTessLevel - tesslevelStrideToInterpolate;
    lodLevelInterpolationFactor = exactTesslevelOnStride / tesslevelStrideToInterpolate;

  }

*/
{%endcomment%}
